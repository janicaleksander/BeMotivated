package components

import "github.com/janicaleksander/BeMotivated/types"


templ DashboardProduction(){
@Base(Calendar())
}


templ Calendar(){
<head>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

    <style>
        @import url(https://fonts.googleapis.com/css?family=Poppins:100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic);
        :root {
            --primary-color: #ff0000;
            --text-color: #1d1d1d;
            --bg-color:#ffffff;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;

        }
        body {
            background: #ffffff;
        }
        .container {
            width: 100%;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: -100px auto;


        }
        .calendar {
            width: 100%;
            max-width: 500px;
            background: var(--bg-color);
            padding: 30px 20px;
            border-radius: 10px;

        }
        .calendar .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 2px solid #ccc;
        }
        .calendar .header .month {
            display: flex;
            align-items: center;
            font-size: 25px;
            font-weight: 600;
            color: var(--text-color);
        }
        .calendar .header .btns {
            display: flex;
            gap: 10px;
        }
        .calendar .header .btns .btn {
            width: 50px;
            height: 40px;
            background: var(--primary-color);
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 5px;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .calendar .header .btns .btn:hover {
            background: #db0933;
            transform: scale(1.05);
        }
        .calendar .weekdays {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        .calendar .weekdays .day {
            width: calc(100% / 7 - 10px);
            text-align: center;
            font-size: 16px;
            font-weight: 600;
        }
        .calendar .days {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        .calendar .days .day {
            width: calc(100% / 7 - 10px);
            height: 50px;
            background: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 5px;
            font-size: 16px;
            font-weight: 400;
            color: var(--text-color);
            transition: all 0.3s;
            user-select: none;
        }
        .calendar .days .day:not(.next):not(.prev):hover {
            color: #fff;
            background: var(--primary-color);
            transform: scale(1.05);
        }
        .calendar .days .day.next,
        .calendar .days .day.prev {
            color: #ccc;
        }
        .calendar .days .day.today {
            color: #fff;
            background: var(--primary-color);
        }
        .credits a {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 14px;
            color: #aaa;
        }
        .credits span {
            color: var(--primary-color);
        }

    </style>
</head>

<body>

<div class="container">
    <div class="calendar">
        <div class="header">
            <div class="month"></div>
            <div class="btns">
                <!-- today -->
                <div class="btn today">
                    <span class="material-symbols-outlined">today</span>
                </div>
                <!-- previous month -->
                <div class="btn prev">
                    <span class="material-symbols-outlined">chevron_left</span>
                </div>
                <!-- next month -->
                <div class="btn next">
                    <span class="material-symbols-outlined">chevron_right</span>
                </div>
            </div>
        </div>
        <div class="weekdays">
            <div class="day">Mon</div>
            <div class="day">Tue</div>
            <div class="day">Wed</div>
            <div class="day">Thu</div>
            <div class="day">Fri</div>
            <div class="day">Sat</div>
            <div class="day">Sun</div>
        </div>
        <div class="days">
            <!-- render days with js -->
        </div>
        <br>
        <div id="calendar-task">
        </div>

        <div id="chart" >
            <form hx-post="/api/test/chart" hx-target="#chart" id="myform">


            </form>
        </div>

    </div>
</div>

<script>



    function getDayOfWeekIndex(date, month, year) {
        const dateObj = new Date(year, month - 1, date);
        const dayNumber = dateObj.getDay();
        return dayNumber;
    }

    const daysContainer = document.querySelector(".days");
    const nextBtn = document.querySelector(".next");
    const prevBtn = document.querySelector(".prev");
    const todayBtn = document.querySelector(".today");
    const month = document.querySelector(".month");

    const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ];

    const days = [ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat","Sun"];

    const date = new Date();
    let currentMonth = date.getMonth();
    let currentYear = date.getFullYear();

    const renderCalendar = () => {
        date.setDate(1);
        const firstDay = new Date(currentYear, currentMonth, 1); // data pierwszego dnia miesciaca
        const lastDay = new Date(currentYear, currentMonth + 1, 0); // data ostatniego dnia miesciaca


        const lastDayIndex = lastDay.getDay(); // indeks ostatenigo dnia tygodnie od 0 do 6 0 to niedziela 6 to sobota
        const lastDayDate = lastDay.getDate(); // cyferka ostatniego dnia tygodznia


        const prevLastDay = new Date(currentYear, currentMonth, 0); // data ostatniego dnia last miesiaca
        const prevLastDayDate = prevLastDay.getDate(); // cyferka ostatniego dnia last miesiaca
        var nextDays =0;
        if(lastDayIndex===0){
            const nextDays = 0;
        }else{
            nextDays = 7 - lastDayIndex -1;
        }

        month.innerHTML = `${months[currentMonth]} ${currentYear}`;

        let days = "";
        // firstDay.getDay zwraca indeks pierwszego dnia 0 niedziela 6 sobota
        let k=0;
        if(firstDay.getDay()!==0) {
            for (let x = firstDay.getDay() - 1 ; x > 0; x--) {
                days += `<button class="day prev">${prevLastDayDate - x+1}</button>`;
                k++;

            }
        }
        k = 6;
        if(firstDay.getDay()===0) {
            for (let x = 6 ; x > 0; x--) {
                days += `<button class="day prev">${prevLastDayDate - k+1}</button>`;
                k--;
            }
        }

        for (let i = 1; i <= lastDayDate; i++) {
            if (
                i === new Date().getDate() &&
                currentMonth === new Date().getMonth() &&
                currentYear === new Date().getFullYear()
            ) {
                days += `<button  hx-post="/api/get-task" hx-target="#calendar-task" hx-swap="innerHTML"  class="day today" name="show" value="${currentYear},${currentMonth+1},${i}">${i}</button>`;

            } else {
                days += `<button hx-post="/api/get-task" hx-target="#calendar-task" hx-swap="innerHTML"  class="day " name="show" value="${currentYear},${currentMonth+1},${i}">${i}</button>`;
            }
        }

        for (let j = 1; j <= nextDays+1; j++) {
            days += `<button  hx-post="/api/get-task" hx-target="#calendar-task" hx-swap="innerHTML"  class="day" name="show" value="${currentYear},${currentMonth+1},${j}">${j}</button>`;

        }

        daysContainer.innerHTML = days;
        hideTodayBtn();
    };

    nextBtn.addEventListener("click", () => {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        renderCalendar();
    });

    prevBtn.addEventListener("click", () => {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        renderCalendar();
    });

    todayBtn.addEventListener("click", () => {
        currentMonth = date.getMonth();
        currentYear = date.getFullYear();
        renderCalendar();
    });

    function hideTodayBtn() {
        if (
            currentMonth === new Date().getMonth() &&
            currentYear === new Date().getFullYear()
        ) {
            todayBtn.style.display = "none";
        } else {
            todayBtn.style.display = "flex";
        }
    }

    renderCalendar();

    function handleClick(event) {
        alert(event + ' clicked');
    }


</script>

</body>
}


templ DayTaskSlice(t []types.Task) {
<div >
    <form class="bg-red-200">
        for _, item := range t{
        <p>{item.Description}</p>
        }
    </form>

</div>
}

templ Chart(){
<div class="py-6" id="pie-chart"></div>

<script>

    const getChartOptions = () => {
        return {
            series: [52.8, 26.8, 20.4],
            colors: ["#1C64F2", "#16BDCA", "#9061F9"],
            chart: {
                height: 420,
                width: "100%",
                type: "pie",
            },
            stroke: {
                colors: ["white"],
                lineCap: "",
            },
            plotOptions: {
                pie: {
                    labels: {
                        show: true,
                    },
                    size: "100%",
                    dataLabels: {
                        offset: -25
                    }
                },
            },
            labels: ["Direct", "Organic search", "Referrals"],
            dataLabels: {
                enabled: true,
                style: {
                    fontFamily: "Inter, sans-serif",
                },
            },
            legend: {
                position: "bottom",
                fontFamily: "Inter, sans-serif",
            },
            yaxis: {
                labels: {
                    formatter: function (value) {
                        return value + "%"
                    },
                },
            },
            xaxis: {
                labels: {
                    formatter: function (value) {
                        return value  + "%"
                    },
                },
                axisTicks: {
                    show: false,
                },
                axisBorder: {
                    show: false,
                },
            },
        }
    }

    if (document.getElementById("pie-chart") && typeof ApexCharts !== 'undefined') {
        const chart = new ApexCharts(document.getElementById("pie-chart"), getChartOptions());
        chart.render();
    }


</script>
}

templ ChartData(values ...string){
    for _,value := range values{
        <p>{value}</p>
    }

}