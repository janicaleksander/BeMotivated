package components

import "github.com/janicaleksander/BeMotivated/types"
import "strconv"

var cat1 string
var cat2 string
var cat3 string

var icat1 int
var icat2 int
var icat3 int


templ DashboardProduction(s []types.Task){
@Base(Calendar(s),ChartBox())
}


templ Calendar(slice []types.Task){
<head>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>


    <style>
        @import url(https://fonts.googleapis.com/css?family=Poppins:100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic);
        :root {
            --primary-color: #ff0000;
            --text-color: #1d1d1d;
            --bg-color:#ffffff;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;

        }
        body {
            background: #ffffff;
        }
        .container {
            width: 100%;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: -100px auto;


        }
        .calendar {
            width: 100%;
            max-width: 500px;
            background: var(--bg-color);
            padding: 150px 20px;
            border-radius: 10px;

        }
        .calendar .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 2px solid #ccc;
        }
        .calendar .header .month {
            display: flex;
            align-items: center;
            font-size: 25px;
            font-weight: 600;
            color: var(--text-color);
        }
        .calendar .header .btns {
            display: flex;
            gap: 10px;
        }
        .calendar .header .btns .btn {
            width: 50px;
            height: 40px;
            background: var(--primary-color);
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 5px;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .calendar .header .btns .btn:hover {
            background: #db0933;
            transform: scale(1.05);
        }
        .calendar .weekdays {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        .calendar .weekdays .day {
            width: calc(100% / 7 - 10px);
            text-align: center;
            font-size: 16px;
            font-weight: 600;
        }
        .calendar .days {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        .calendar .days .day {
            width: calc(100% / 7 - 10px);
            height: 50px;
            background: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 5px;
            font-size: 16px;
            font-weight: 400;
            color: var(--text-color);
            transition: all 0.3s;
            user-select: none;
        }
        .calendar .days .day:not(.next):not(.prev):hover {
            color: #fff;
            background: var(--primary-color);
            transform: scale(1.05);
        }
        .calendar .days .day.next,
        .calendar .days .day.prev {
            color: #ccc;
        }
        .calendar .days .day.today {
            color: #fff;
            background: var(--primary-color);
        }
        .credits a {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 14px;
            color: #aaa;
        }
        .credits span {
            color: var(--primary-color);
        }
        #desc{
        background-color:#ffb4bf;
        padding: 5px 5px;
        margin-bottom:20px;
        border-radius:5px;
        word-wrap: break-word;


        }

    </style>
</head>

<body>

<div class="container">
    <div class="calendar">
        <div class="header">
            <div class="month"></div>
            <div class="btns">
                <!-- today -->
                <div class="btn today">
                    <span class="material-symbols-outlined">today</span>
                </div>
                <!-- previous month -->
                <div class="btn prev">
                    <span class="material-symbols-outlined">chevron_left</span>
                </div>
                <!-- next month -->
                <div class="btn next">
                    <span class="material-symbols-outlined">chevron_right</span>
                </div>
            </div>
        </div>

        <div class="weekdays">
            <div class="day">Mon</div>
            <div class="day">Tue</div>
            <div class="day">Wed</div>
            <div class="day">Thu</div>
            <div class="day">Fri</div>
            <div class="day">Sat</div>
            <div class="day">Sun</div>
        </div>
        <div class="days">
            <!-- render days with js -->
        </div>
        <br>
        <div id="calendar-task">
        </div>

        <div id="chart" >
            <form >

            </form>
        </div>
        <div>
        for _,values := range slice{
        <div id="desc">{values.Description}</div>
        }

        </div>



    </div>
</div>

<script>


    function getDayOfWeekIndex(date, month, year) {
        const dateObj = new Date(year, month - 1, date);
        const dayNumber = dateObj.getDay();
        return dayNumber;
    }

    const daysContainer = document.querySelector(".days");
    const nextBtn = document.querySelector(".next");
    const prevBtn = document.querySelector(".prev");
    const todayBtn = document.querySelector(".today");
    const month = document.querySelector(".month");

    const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ];

    const days = [ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat","Sun"];

    const date = new Date();
    let currentMonth = date.getMonth();
    let currentYear = date.getFullYear();

    const renderCalendar = () => {
        date.setDate(1);
        const firstDay = new Date(currentYear, currentMonth, 1); // data pierwszego dnia miesciaca
        const lastDay = new Date(currentYear, currentMonth + 1, 0); // data ostatniego dnia miesciaca


        const lastDayIndex = lastDay.getDay(); // indeks ostatenigo dnia tygodnie od 0 do 6 0 to niedziela 6 to sobota
        const lastDayDate = lastDay.getDate(); // cyferka ostatniego dnia tygodznia


        const prevLastDay = new Date(currentYear, currentMonth, 0); // data ostatniego dnia last miesiaca
        const prevLastDayDate = prevLastDay.getDate(); // cyferka ostatniego dnia last miesiaca
        var nextDays =0;
        if(lastDayIndex===0){
            const nextDays = 0;
        }else{
            nextDays = 7 - lastDayIndex -1;
        }

        month.innerHTML = `${months[currentMonth]} ${currentYear}`;

        let days = "";
        // firstDay.getDay zwraca indeks pierwszego dnia 0 niedziela 6 sobota
        let k=0;
        if(firstDay.getDay()!==0) {
            for (let x = firstDay.getDay() - 1 ; x > 0; x--) {
                days += `<div class="day prev">${prevLastDayDate - x+1}</div>`;
                k++;

            }
        }
        k = 6;
        if(firstDay.getDay()===0) {
            for (let x = 6 ; x > 0; x--) {
                days += `<div class="day prev">${prevLastDayDate - k+1}</div>`;
                k--;
            }
        }

        for (let i = 1; i <= lastDayDate; i++) {
            if (
                i === new Date().getDate() &&
                currentMonth === new Date().getMonth() &&
                currentYear === new Date().getFullYear()
            ) {
                days += `<div   class="day today" name="show" value="${currentYear},${currentMonth+1},${i}">${i}</div>`;

            } else {
                days += `<div  class="day" name="show" value="${currentYear},${currentMonth+1},${i}">${i}</div>`;
            }
        }

        for (let j = 1; j <= nextDays+1; j++) {
            days += `<div    class="day" name="show" value="${currentYear},${currentMonth+1},${j}">${j}</div>`;

        }

        daysContainer.innerHTML = days;
        hideTodayBtn();
    };

    nextBtn.addEventListener("click", () => {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        renderCalendar();
    });

    prevBtn.addEventListener("click", () => {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        renderCalendar();
    });

    todayBtn.addEventListener("click", () => {
        currentMonth = date.getMonth();
        currentYear = date.getFullYear();
        renderCalendar();
    });

    function hideTodayBtn() {
        if (
            currentMonth === new Date().getMonth() &&
            currentYear === new Date().getFullYear()
        ) {
            todayBtn.style.display = "none";
        } else {
            todayBtn.style.display = "flex";
        }
    }

    renderCalendar();

    function handleClick(event){
        alert(event + ' clicked');
    }



</script>

</body>
}


templ DayTaskSlice(t []types.Task) {
<div >
    <form class="bg-red-200">
        for _, item := range t{
        <p>{item.Description}</p>
        }
    </form>

</div>
}
templ ChartBox(){
<head>

<style>
 #c-box {
   display: flex;
   justify-content: space-between;
 }
 #c-1, #c-2,#c-3{
   flex: 1;
   margin-right: 10px;
   padding: 10px;
   border: 1px solid #ccc;
   box-sizing: border-box;
  }
</style>
</head>
<div id="c-box">
@Chart1()
@Chart3()


</div>


}

templ Chart1(){
   <div id="c-1">
   <div class="py-6" id="pie-chart"></div>
   <script>
        var liczba1 = 0;
        var liczba2 = 0;
        var liczba3 = 0;

        const updateChart = () => {
            let url = "/api/test/chart-1";
            fetch(url)
                .then((res) => res.text())
                .then((response) => {
                    console.log("Odpowiedź z API:", response);

                    response = response.replace("[", "").replace("]", "");
                    let stringArray = response.split(',');
                    let numberArray = stringArray.map(Number);
                    console.log("Tablica liczb:", numberArray);

                    liczba1 = numberArray[0];
                    liczba2 = numberArray[1];
                    liczba3 = numberArray[2];

                    console.log("liczba1:", liczba1);
                    console.log("liczba2:", liczba2);
                    console.log("liczba3:", liczba3);

                    renderChart();
                })
                .catch((error) => alert("Error: " + error));
        };

        const renderChart = () => {
            const chartOptions = getChartOptions();
            const chart = new ApexCharts(document.getElementById("pie-chart"), chartOptions);
            chart.render();
        };

        const getChartOptions = () => {
            return {
                series: [liczba1, liczba2, liczba3],
                colors: ["#1C64F2", "#16BDCA", "#9061F9"],
                chart: {
                    height: 420,
                    width: "100%",
                    type: "pie",
                },
                stroke: {
                    colors: ["white"],
                    lineCap: "",
                },
                plotOptions: {
                    pie: {
                        labels: {
                            show: true,
                        },
                        size: "100%",
                        dataLabels: {
                            offset: -25
                        }
                    },
                },
                labels: ["Work", "Play", "Training"],
                dataLabels: {
                    enabled: true,
                    style: {
                        fontFamily: "Inter, sans-serif",
                    },
                },
                legend: {
                    position: "bottom",
                    fontFamily: "Inter, sans-serif",
                },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value + "%"
                        },
                    },
                },
                xaxis: {
                    labels: {
                        formatter: function (value) {
                            return value + "%"
                        },
                    },
                    axisTicks: {
                        show: false,
                    },
                    axisBorder: {
                        show: false,
                    },
                },
            };
        };


        updateChart();
    </script>
<p>Tasks category chart</p>

    </div>
}

templ Chart2(){
   <div id="c-2">
   <div class="py-6" id="pie-chart2"></div>
   <script>
        var liczba1 = 0;
        var liczba2 = 0;
        var liczba3 = 0;

        const updateChart2 = () => {
            let url = "/api/test/chart-1";
            fetch(url)
                .then((res) => res.text())
                .then((response) => {
                    console.log("Odpowiedź z API:", response);

                    response = response.replace("[", "").replace("]", "");
                    let stringArray = response.split(',');
                    let numberArray = stringArray.map(Number);
                    console.log("Tablica liczb:", numberArray);

                    liczba1 = numberArray[0];
                    liczba2 = numberArray[1];
                    liczba3 = numberArray[2];

                    console.log("liczba1:", liczba1);
                    console.log("liczba2:", liczba2);
                    console.log("liczba3:", liczba3);

                    renderChart2();
                })
                .catch((error) => alert("Error: " + error));
        };

        const renderChart2 = () => {
            const chartOptions = getChartOptions2();
            const chart = new ApexCharts(document.getElementById("pie-chart2"), chartOptions);
            chart.render();
        };

        const getChartOptions2 = () => {
            return {
                series: [liczba1, liczba2, liczba3],
                colors: ["#1C64F2", "#16BDCA", "#9061F9"],
                chart: {
                    height: 420,
                    width: "100%",
                    type: "pie",
                },
                stroke: {
                    colors: ["white"],
                    lineCap: "",
                },
                plotOptions: {
                    pie: {
                        labels: {
                            show: true,
                        },
                        size: "100%",
                        dataLabels: {
                            offset: -25
                        }
                    },
                },
                labels: ["Direct", "Organic search", "Referrals"],
                dataLabels: {
                    enabled: true,
                    style: {
                        fontFamily: "Inter, sans-serif",
                    },
                },
                legend: {
                    position: "bottom",
                    fontFamily: "Inter, sans-serif",
                },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value + "%"
                        },
                    },
                },
                xaxis: {
                    labels: {
                        formatter: function (value) {
                            return value + "%"
                        },
                    },
                    axisTicks: {
                        show: false,
                    },
                    axisBorder: {
                        show: false,
                    },
                },
            };
        };


        updateChart2();
    </script>
    </div>
}


templ Chart3(){
<div id="c-3">

<div id="column-chart"></div>
<script>
var mon =0;
var tue =0;
var wen =0;
var thu =0;
var fri=0;
var sat=0;
var sun=0;
        const updateChart3 = () => {
            let url = "/api/test/chart-3";
            fetch(url)
                .then((res) => res.text())
                .then((response) => {
                    console.log("Odpowiedź z API:", response);

                    response = response.replace("[", "").replace("]", "");
                    let stringArray = response.split(',');
                    let numberArray = stringArray.map(Number);
                    console.log("Tablica liczb:", numberArray);

                    mon = numberArray[0];
                    tue = numberArray[1];
                    wen = numberArray[2];
                    thu = numberArray[3];
                    fri = numberArray[4];
                    sat = numberArray[5];
                    sun = numberArray[6];

                    console.log("liczba1:", mon);
                    console.log("liczba2:", tue);
                    console.log("liczba3:", wen);
                    console.log("liczba4:", thu);
                    console.log("liczba5:", fri);
                    console.log("liczba6:", sat);
                    console.log("liczba7:", sun);

                    renderChart3();
                })
                .catch((error) => alert("Error: " + error));
        };
        const renderChart3 = () => {
                    const chartOptions = getChartOptions3();
                    const chart = new ApexCharts(document.getElementById("column-chart"), chartOptions);
                    chart.render();
        };


const getChartOptions3 = () =>{
return{
  colors: ["#1A56DB", "#FDBA8C"],
  series: [
    {
      name: "Streak",
      color: "#ff0000",
      data: [
        { x: "Mon", y: mon },
        { x: "Tue", y: tue },
        { x: "Wed", y: wen },
        { x: "Thu", y: thu },
        { x: "Fri", y: fri },
        { x: "Sat", y: sat },
        { x: "Sun", y: sun },
      ],
    },

  ],
  chart: {
    type: "bar",
    height: "320px",
    fontFamily: "Inter, sans-serif",
    toolbar: {
      show: false,
    },
  },
  plotOptions: {
    bar: {
      horizontal: false,
      columnWidth: "60%",
      borderRadiusApplication: "end",
      borderRadius: 8,
    },
  },
  tooltip: {
    shared: true,
    intersect: false,
    style: {
      fontFamily: "Inter, sans-serif",
    },
  },
  states: {
    hover: {
      filter: {
        type: "darken",
        value: 1,
      },
    },
  },
  stroke: {
    show: true,
    width: 0,
    colors: ["transparent"],
  },
  grid: {
    show: false,
    strokeDashArray: 4,
    padding: {
      left: 2,
      right: 2,
      top: -14
    },
  },
  dataLabels: {
    enabled: false,
  },
  legend: {
    show: false,
  },
  xaxis: {
    floating: false,
    labels: {
      show: true,
      style: {
        fontFamily: "Inter, sans-serif",
        cssClass: 'text-xs font-normal fill-gray-500 dark:fill-gray-400'
      }
    },
    axisBorder: {
      show: false,
    },
    axisTicks: {
      show: false,
    },
  },
  yaxis: {
    show: false,
  },
  fill: {
    opacity: 1,
  },
  }
}




updateChart3();
</script>
<br>
<br>
<br>
<p>Last 7 day pomodoro streak</p>
</div>




}


templ SendDataC1(c1, c2, c3 string){
    {{
    cat1 = c1
    cat2 = c2
    cat3 = c3
    icat1 , _ = strconv.Atoi(cat1)
    icat2 , _ = strconv.Atoi(cat2)
    icat3 , _ = strconv.Atoi(cat3)

    }}


}

